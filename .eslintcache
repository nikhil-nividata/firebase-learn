[{"C:\\Users\\nikhi\\Desktop\\friebase-learn\\src\\index.js":"1","C:\\Users\\nikhi\\Desktop\\friebase-learn\\src\\reportWebVitals.js":"2","C:\\Users\\nikhi\\Desktop\\friebase-learn\\src\\App.jsx":"3","C:\\Users\\nikhi\\Desktop\\friebase-learn\\src\\components\\common\\navbar\\index.jsx":"4","C:\\Users\\nikhi\\Desktop\\friebase-learn\\src\\router\\index.jsx":"5","C:\\Users\\nikhi\\Desktop\\friebase-learn\\src\\components\\signUp\\index.jsx":"6","C:\\Users\\nikhi\\Desktop\\friebase-learn\\src\\components\\login\\index.jsx":"7","C:\\Users\\nikhi\\Desktop\\friebase-learn\\src\\components\\homepage\\index.jsx":"8","C:\\Users\\nikhi\\Desktop\\friebase-learn\\src\\components\\homepage\\createPost\\index.jsx":"9","C:\\Users\\nikhi\\Desktop\\friebase-learn\\src\\components\\homepage\\postView\\index.jsx":"10","C:\\Users\\nikhi\\Desktop\\friebase-learn\\src\\components\\myPosts\\index.jsx":"11"},{"size":1002,"mtime":1608811667912,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":829,"mtime":1609218741669,"results":"15","hashOfConfig":"13"},{"size":967,"mtime":1609166272905,"results":"16","hashOfConfig":"13"},{"size":757,"mtime":1609166020046,"results":"17","hashOfConfig":"13"},{"size":2786,"mtime":1608801825985,"results":"18","hashOfConfig":"13"},{"size":1394,"mtime":1608801821292,"results":"19","hashOfConfig":"13"},{"size":1313,"mtime":1609219289599,"results":"20","hashOfConfig":"13"},{"size":3163,"mtime":1609146990328,"results":"21","hashOfConfig":"13"},{"size":1044,"mtime":1609219275014,"results":"22","hashOfConfig":"13"},{"size":1110,"mtime":1609219156209,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"hg9f15",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\nikhi\\Desktop\\friebase-learn\\src\\index.js",[],["50","51"],"C:\\Users\\nikhi\\Desktop\\friebase-learn\\src\\reportWebVitals.js",[],"C:\\Users\\nikhi\\Desktop\\friebase-learn\\src\\App.jsx",["52","53"],"C:\\Users\\nikhi\\Desktop\\friebase-learn\\src\\components\\common\\navbar\\index.jsx",[],"C:\\Users\\nikhi\\Desktop\\friebase-learn\\src\\router\\index.jsx",[],"C:\\Users\\nikhi\\Desktop\\friebase-learn\\src\\components\\signUp\\index.jsx",["54","55"],"import Styles from \"./index.module.css\";\r\nimport React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Card, Row, Col, TextInput, Button } from \"react-materialize\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport firebase from \"firebase\";\r\nimport \"firebase/auth\";\r\n\r\nconst SignUp = () => {\r\n  const history = useHistory();\r\n  return (\r\n    <div className=\"container\">\r\n      <Row>\r\n        <Col m={2}></Col>\r\n        <Col m={8}>\r\n          <Card>\r\n            <Formik\r\n              initialValues={{ email: \"\", password: \"\", confirmPassword: \"\" }}\r\n              validationSchema={Yup.object({\r\n                email: Yup.string()\r\n                  .email(\"Not a valid email address\")\r\n                  .required(\"Email is required\"),\r\n                password: Yup.string()\r\n                  .min(6, \"Password must be atleast 6 characters long\")\r\n                  .required(\"Password Required\"),\r\n                confirmPassword: Yup.string().required(\r\n                  \"Please re-enter your password\"\r\n                ),\r\n              })}\r\n              validate={(values) => {\r\n                if (values.confirmPassword !== values.password) {\r\n                  return {\r\n                    confirmPassword: \"Passwords do not match\",\r\n                  };\r\n                }\r\n              }}\r\n              onSubmit={async (values, { resetForm }) => {\r\n                const { email, password } = values;\r\n                try {\r\n                  const user = await firebase\r\n                    .auth()\r\n                    .createUserWithEmailAndPassword(email, password);\r\n                  resetForm();\r\n                  history.push(\"/login\");\r\n                } catch (error) {}\r\n              }}\r\n            >\r\n              <Form>\r\n                <label htmlFor=\"email\">Email</label>\r\n                <Field name=\"email\" type=\"email\" />\r\n                <p className={Styles.errorMessage}>\r\n                  <ErrorMessage name=\"email\" />\r\n                </p>\r\n\r\n                <label htmlFor=\"password\">Password</label>\r\n                <Field name=\"password\" type=\"password\" />\r\n                <p className={Styles.errorMessage}>\r\n                  <ErrorMessage name=\"password\" />\r\n                </p>\r\n\r\n                <label htmlFor=\"confirmPassword\">Confirm Password</label>\r\n                <Field name=\"confirmPassword\" type=\"password\" />\r\n                <p className={Styles.errorMessage}>\r\n                  <ErrorMessage name=\"confirmPassword\" />\r\n                </p>\r\n\r\n                <Button type=\"submit\">Sign Up</Button>\r\n              </Form>\r\n            </Formik>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n","C:\\Users\\nikhi\\Desktop\\friebase-learn\\src\\components\\login\\index.jsx",["56","57","58"],"import React from \"react\";\r\nimport { Card, Row, Col, TextInput, Button } from \"react-materialize\";\r\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\r\nimport firebase from \"firebase\";\r\nimport \"firebase/auth\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Login = () => {\r\n  const history = useHistory();\r\n  return (\r\n    <div className=\"container\">\r\n      <Row>\r\n        <Col m={2}></Col>\r\n        <Col m={8}>\r\n          <Card>\r\n            <Formik\r\n              initialValues={{ email: \"\", password: \"\" }}\r\n              onSubmit={async (values, { resetForm }) => {\r\n                const { email, password } = values;\r\n                try {\r\n                  const user = await firebase\r\n                    .auth()\r\n                    .signInWithEmailAndPassword(email, password);\r\n                  resetForm();\r\n                  history.push(\"/\");\r\n                } catch (error) {}\r\n              }}\r\n            >\r\n              <Form>\r\n                <label htmlFor=\"email\">Email</label>\r\n                <Field name=\"email\" type=\"email\" />\r\n\r\n                <label htmlFor=\"password\">Password</label>\r\n                <Field name=\"password\" type=\"password\" />\r\n                <Button type=\"submit\">Login</Button>\r\n              </Form>\r\n            </Formik>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\nikhi\\Desktop\\friebase-learn\\src\\components\\homepage\\index.jsx",["59"],"C:\\Users\\nikhi\\Desktop\\friebase-learn\\src\\components\\homepage\\createPost\\index.jsx",["60","61","62","63","64"],"import React from \"react\";\r\nimport { Formik, Field, ErrorMessage, Form, useFormik } from \"formik\";\r\nimport { Modal, Button, TextInput, Textarea } from \"react-materialize\";\r\nimport firebase from \"firebase\";\r\nimport \"firebase/functions\";\r\n\r\nexport default function CreatePost() {\r\n  const functions = firebase.functions();\r\n  const formik = useFormik({\r\n    initialValues: { title: \"\", post: \"\" },\r\n    validate: (values) => {\r\n      const errors = {};\r\n      if (!values.title) {\r\n        errors.title = \"Post Title Required\";\r\n      }\r\n      if (!values.post) {\r\n        errors.post = \"Post should not be empty\";\r\n      }\r\n      return errors;\r\n    },\r\n    onSubmit: async (values) => {\r\n      const addPost = functions.httpsCallable(\"addPost\");\r\n      try {\r\n        const response = await addPost({\r\n          ...values,\r\n          createdAt: Date.now(),\r\n        });\r\n        values.title = \"\";\r\n        values.post = \"\";\r\n        document.getElementById(\"modalCloseButton\").click();\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    },\r\n  });\r\n  return (\r\n    <Modal\r\n      actions={[\r\n        <Button\r\n          flat\r\n          node=\"button\"\r\n          waves=\"green\"\r\n          onClick={() => {\r\n            document.getElementById(\"submitPost\").click();\r\n          }}\r\n        >\r\n          Post\r\n        </Button>,\r\n        <Button\r\n          flat\r\n          modal=\"close\"\r\n          node=\"button\"\r\n          waves=\"red\"\r\n          id=\"modalCloseButton\"\r\n        >\r\n          Cancel\r\n        </Button>,\r\n      ]}\r\n      bottomSheet={false}\r\n      fixedFooter={false}\r\n      header=\"Create a Post\"\r\n      id=\"Modal-0\"\r\n      open={false}\r\n      options={{\r\n        dismissible: true,\r\n        endingTop: \"10%\",\r\n        inDuration: 250,\r\n        onCloseEnd: null,\r\n        onCloseStart: null,\r\n        onOpenEnd: null,\r\n        onOpenStart: null,\r\n        opacity: 0.5,\r\n        outDuration: 250,\r\n        preventScrolling: true,\r\n        startingTop: \"4%\",\r\n      }}\r\n      trigger={\r\n        <Button\r\n          id=\"createModalTrigger\"\r\n          node=\"button\"\r\n          style={{ display: \"none\" }}\r\n        >\r\n          MODAL\r\n        </Button>\r\n      }\r\n    >\r\n      <form onSubmit={formik.handleSubmit}>\r\n        <TextInput\r\n          name=\"title\"\r\n          id=\"title\"\r\n          type=\"text\"\r\n          value={formik.values.title}\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          label=\"Title\"\r\n        ></TextInput>\r\n        {formik.errors.title ? (\r\n          <p style={{ color: \"red\", fontSize: \"12px\" }}>\r\n            {formik.errors.title}\r\n          </p>\r\n        ) : null}\r\n\r\n        {formik.errors.post ? (\r\n          <p style={{ color: \"red\", fontSize: \"12px\" }}>{formik.errors.post}</p>\r\n        ) : null}\r\n        <Textarea\r\n          name=\"post\"\r\n          id=\"post\"\r\n          value={formik.values.post}\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          label=\"Post\"\r\n        ></Textarea>\r\n        <Button id=\"submitPost\" type=\"submit\" style={{ display: \"none\" }}>\r\n          Post\r\n        </Button>\r\n      </form>\r\n    </Modal>\r\n  );\r\n}\r\n","C:\\Users\\nikhi\\Desktop\\friebase-learn\\src\\components\\homepage\\postView\\index.jsx",[],"C:\\Users\\nikhi\\Desktop\\friebase-learn\\src\\components\\myPosts\\index.jsx",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":6,"column":8,"nodeType":"71","messageId":"72","endLine":6,"endColumn":14},{"ruleId":"69","severity":1,"message":"73","line":33,"column":13,"nodeType":"71","messageId":"72","endLine":33,"endColumn":16},{"ruleId":"69","severity":1,"message":"74","line":4,"column":26,"nodeType":"71","messageId":"72","endLine":4,"endColumn":35},{"ruleId":"69","severity":1,"message":"75","line":41,"column":25,"nodeType":"71","messageId":"72","endLine":41,"endColumn":29},{"ruleId":"69","severity":1,"message":"74","line":2,"column":26,"nodeType":"71","messageId":"72","endLine":2,"endColumn":35},{"ruleId":"69","severity":1,"message":"76","line":3,"column":31,"nodeType":"71","messageId":"72","endLine":3,"endColumn":43},{"ruleId":"69","severity":1,"message":"75","line":21,"column":25,"nodeType":"71","messageId":"72","endLine":21,"endColumn":29},{"ruleId":"69","severity":1,"message":"77","line":2,"column":18,"nodeType":"71","messageId":"72","endLine":2,"endColumn":23},{"ruleId":"69","severity":1,"message":"78","line":2,"column":10,"nodeType":"71","messageId":"72","endLine":2,"endColumn":16},{"ruleId":"69","severity":1,"message":"79","line":2,"column":18,"nodeType":"71","messageId":"72","endLine":2,"endColumn":23},{"ruleId":"69","severity":1,"message":"76","line":2,"column":25,"nodeType":"71","messageId":"72","endLine":2,"endColumn":37},{"ruleId":"69","severity":1,"message":"80","line":2,"column":39,"nodeType":"71","messageId":"72","endLine":2,"endColumn":43},{"ruleId":"69","severity":1,"message":"81","line":24,"column":15,"nodeType":"71","messageId":"72","endLine":24,"endColumn":23},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'styles' is defined but never used.","Identifier","unusedVar","'uid' is assigned a value but never used.","'TextInput' is defined but never used.","'user' is assigned a value but never used.","'ErrorMessage' is defined but never used.","'Modal' is defined but never used.","'Formik' is defined but never used.","'Field' is defined but never used.","'Form' is defined but never used.","'response' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]